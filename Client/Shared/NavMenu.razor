@using System.Security.Claims

<UserCard />
<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Outlined.Home">Home</MudNavLink>
    @if (_canViewHangfire)
    {
        <MudNavLink Href="@_hangUrl" Target="_blank" Icon="@Icons.Material.Outlined.Work">
            Hangfire
        </MudNavLink>
    }
    <MudNavLink Href="@_swaggerUrl" Target="_blank" Icon="@Icons.Material.Outlined.LiveHelp">
        Swagger
    </MudNavLink>
    <MudListSubheader Class="mt-2 mb-n2">Personal</MudListSubheader>
    @if (_canViewDashboards)
    {
        <MudNavLink Href="/dashboard" Icon="@Icons.Material.Outlined.Dashboard">
            Dashboard
        </MudNavLink>
    }
    @if (_canViewStamps)
    {
        <MudNavLink Href="/stamps" Icon="@Icons.Material.Outlined.Timer">
            Stamps
        </MudNavLink>
    }
    <MudNavLink Href="/account" Icon="@Icons.Material.Outlined.AccountCircle">
        Account
    </MudNavLink>
    @if (_canViewAuditTrails)
    {
        <MudNavLink Href="/audit-trails" Icon="@Icons.Material.Outlined.DataExploration">
            Audit Trails
        </MudNavLink>
    }
    <MudListSubheader Class="mt-2 mb-n2">Services</MudListSubheader>
    <MudNavLink Href="/sendmail" Icon="@Icons.Material.Outlined.Email">
        Send Mail
    </MudNavLink>
    <MudNavLink Href="/sendsms" Icon="@Icons.Material.Outlined.Sms">
        Send SMS
    </MudNavLink>

    @if (_canViewDocuments || _canViewDocumentTypes)
    {
        <MudListSubheader Class="mt-2 mb-n2">Document Management</MudListSubheader>
        @if (_canViewDocuments)
        {
            <MudNavLink Href="/document-store" Icon="@Icons.Material.Outlined.AttachFile">
                Document Store
            </MudNavLink>
        }
        @if (_canViewDocumentTypes)
        {
            <MudNavLink Href="/document-types" Icon="@Icons.Material.Outlined.FileCopy">
                Document Types
            </MudNavLink>
        }
    }

    @if (_canViewUsers || _canViewRoles)
    {
        <MudListSubheader Class="mt-2 mb-n2">Administrator</MudListSubheader>
        @if (_canViewUsers)
        {
            <MudNavLink Href="/identity/users" Icon="@Icons.Material.Outlined.Person">
                Users
            </MudNavLink>
        }
        @if (_canViewRoles)
        {
            <MudNavLink Href="/identity/roles" Icon="@Icons.Material.Outlined.Person">Roles</MudNavLink>
        }
    }
    @if (_canViewChat)
    {
        <MudListSubheader Class="mt-2 mb-n2">Communication</MudListSubheader>
        <MudNavLink Href="/chat" Icon="@Icons.Material.Outlined.Chat">
            Chat
        </MudNavLink>
    }
</MudNavMenu>

@code {
    private ClaimsPrincipal _authenticationStateProviderUser;

    private bool _canViewHangfire = true;
    private bool _canViewDashboards = true;
    private bool _canViewDocuments = true;
    private bool _canViewDocumentTypes = true;
    private bool _canViewAuditTrails = true;
    private bool _canViewRoles = true;
    private bool _canViewUsers = true;
    private bool _canViewChat = true;
    private bool _canViewProducts = true;
    private bool _canViewStamps = true;
    private string? _hangUrl;
    private string? _swaggerUrl;

    protected override async Task OnParametersSetAsync()
    {
        _authenticationStateProviderUser = await _stateProvider.GetAuthenticationStateProviderUserAsync();
        _canViewHangfire = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Hangfire.View)).Succeeded;
        _canViewDashboards = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Dashboards.View)).Succeeded;
        _canViewDocuments = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Documents.View)).Succeeded;
        _canViewDocumentTypes = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.DocumentTypes.View)).Succeeded;
        _canViewAuditTrails = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.AuditTrails.View)).Succeeded;
        _canViewRoles = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Roles.View)).Succeeded;
        _canViewUsers = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Users.View)).Succeeded;
        _canViewChat = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Communication.Chat)).Succeeded;
        _canViewProducts = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Products.View)).Succeeded;
        _canViewStamps = (await _authorizationService.AuthorizeAsync(_authenticationStateProviderUser, Permissions.Stamps.View)).Succeeded;

        _hangUrl = $"{_config["Urls:Api"]}/jobs";
        _swaggerUrl = $"{_config["Urls:Api"]}/swagger/index.html";
    }
}